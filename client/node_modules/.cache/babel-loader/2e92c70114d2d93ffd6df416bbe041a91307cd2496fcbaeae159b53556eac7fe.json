{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\austi\\\\OneDrive\\\\Desktop\\\\mangacat\\\\client\\\\src\\\\components\\\\UserMangaModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserMangaModal = ({\n  user,\n  manga,\n  isOpen,\n  onClose\n}) => {\n  _s();\n  const [readingStatus, setReadingStatus] = useState(manga.readingStatus || \"\");\n  const [rating, setRating] = useState(manga.rating || 0);\n  const handleRemove = async () => {\n    const body = {\n      user_id: user.user_id,\n      manga_id: manga.manga_id\n    };\n    try {\n      const response = await fetch(\"http://localhost:8000/usermanga/remove\", {\n        method: \"DELETE\",\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      if (response.ok) {\n        console.log(\"Response received: \", response);\n        onClose();\n      } else {\n        console.error(\"Error removing manga\");\n      }\n    } catch (error) {\n      console.error(\"Error removing manga from user list (frontend): \", error);\n    }\n  };\n  const handleRatingUpdate = async () => {\n    const body = {\n      user_id: user.user_id,\n      manga_id: manga.manga_id,\n      rating: rating\n    };\n    try {\n      const response = await fetch(\"http://localhost:8000/usermanga/rate\", {\n        method: \"PUT\",\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      if (response.ok) {\n        console.log(\"Response received: \", response);\n      } else {\n        console.error(\"Error updating status of manga\");\n      }\n    } catch (error) {\n      console.error(\"Error updating status for user manga: \", error);\n    }\n  };\n  const handleReadingStatusUpdate = async () => {\n    const body = {\n      user_id: user.user_id,\n      manga_id: manga.manga_id,\n      reading_status: readingStatus\n    };\n    try {\n      const response = await fetch(\"http://localhost:8000/usermanga/status\", {\n        method: \"PUT\",\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      if (response.ok) {\n        console.log(\"Response received: \", response);\n      } else {\n        console.error(\"Error updating status of manga\");\n      }\n    } catch (error) {\n      console.error(\"Error updating reading status of manga: \", error);\n    }\n  };\n  const handleSave = async () => {\n    await handleReadingStatusUpdate();\n    await handleRatingUpdate();\n    onClose();\n  };\n  if (!isOpen) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(UserMangaModal, \"VdgyUJ4LnM8NPloMftFyW0soM6M=\");\n_c = UserMangaModal;\nexport default UserMangaModal;\nvar _c;\n$RefreshReg$(_c, \"UserMangaModal\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","UserMangaModal","user","manga","isOpen","onClose","_s","readingStatus","setReadingStatus","rating","setRating","handleRemove","body","user_id","manga_id","response","fetch","method","credentials","headers","JSON","stringify","ok","console","log","error","handleRatingUpdate","handleReadingStatusUpdate","reading_status","handleSave","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/austi/OneDrive/Desktop/mangacat/client/src/components/UserMangaModal.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst UserMangaModal = ({ user, manga, isOpen, onClose }) => {\r\n  const [readingStatus, setReadingStatus] = useState(manga.readingStatus || \"\");\r\n  const [rating, setRating] = useState(manga.rating || 0);\r\n\r\n  const handleRemove = async () => {\r\n    const body = {\r\n      user_id: user.user_id,\r\n      manga_id: manga.manga_id,\r\n    };\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/usermanga/remove\", {\r\n        method: \"DELETE\",\r\n        credentials: \"include\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(body),\r\n      });\r\n      if (response.ok) {\r\n        console.log(\"Response received: \", response);\r\n        onClose();\r\n      } else {\r\n        console.error(\"Error removing manga\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error removing manga from user list (frontend): \", error);\r\n    }\r\n  };\r\n\r\n  const handleRatingUpdate = async () => {\r\n    const body = {\r\n      user_id: user.user_id,\r\n      manga_id: manga.manga_id,\r\n      rating: rating,\r\n    };\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/usermanga/rate\", {\r\n        method: \"PUT\",\r\n        credentials: \"include\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(body),\r\n      });\r\n      if (response.ok) {\r\n        console.log(\"Response received: \", response);\r\n      } else {\r\n        console.error(\"Error updating status of manga\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating status for user manga: \", error);\r\n    }\r\n  };\r\n\r\n  const handleReadingStatusUpdate = async () => {\r\n    const body = {\r\n      user_id: user.user_id,\r\n      manga_id: manga.manga_id,\r\n      reading_status: readingStatus,\r\n    };\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/usermanga/status\", {\r\n        method: \"PUT\",\r\n        credentials: \"include\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(body),\r\n      });\r\n      if (response.ok) {\r\n        console.log(\"Response received: \", response);\r\n      } else {\r\n        console.error(\"Error updating status of manga\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating reading status of manga: \", error);\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    await handleReadingStatusUpdate();\r\n    await handleRatingUpdate();\r\n    onClose();\r\n  };\r\n\r\n  if (!isOpen) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserMangaModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}